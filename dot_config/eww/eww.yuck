; Windows foldstart
(defwindow bar
  :monitor 0
  :hexpand false
  :vexpand false
  :geometry (geometry :anchor "top center" :x 0 :y 8 :width "99%")
  :reserve (struts :distance "4%" :side "top")
  :stacking "fg"
  :windowtype "dock"
  (bar :screen 0))
; foldend

; Bar foldstart
(defwidget bar [screen]
  (box :orientation "h"
       :space-evenly false
       :class "bar"
    (box :halign "start"
         :spacing 12
         :hexpand true
         :space-evenly true
      (ws))
    (box :halign "center"
         :spacing 12
         :hexpand true
         :space-evenly false

      (time)
      (date)
      (updates)
      )
    (box :halign "end"
         :spacing 12
         :hexpand false
         :space-evenly false
      (speaker)
      (brightness)
      (network)
      (ping)
      (cpu)
      (ram)
      (disk)
      )))
; foldend

; Variables foldstart
(defpoll time_poll :interval "10s" "date +%H:%M")
(defpoll date_poll :interval "10s" "date +%d/%m/%Y")
(defpoll updates_poll :initial "" :interval "1m" "./modules/updates-dnf.sh &")
(defpoll ping_poll :interval "10s" "./modules/ping.sh")
; foldend

(deflisten notifications_listen :initial '{"show": "no", "content": ""}' "./modules/notifications.sh")

(defpoll speaker_poll :interval "3s" "./modules/volumecontrol.sh")
(defpoll brightness_poll :interval "3s" "./modules/brightness.sh")
; foldend

; Generic icon module foldstart
(defwidget icon-module [icon ?class ?visible]
  (box :class "${class} icon-module"
       :orientation "h"
       :halign "end"
       :space-evenly false
       :visible {visible ?: true} ; because the argument is optional
    (label :class "icon-module__icon" :text "${icon}")
    (children)))
; foldend


; widgets foldstart
(deflisten SPACES :initial '{"active":1,"workspaces":[]}' "~/.config/eww/eww-ws")

(defwidget ws []
  (box :class "workspaces"
  (for entry in "${SPACES.workspaces}"
    (button :onclick "sway workspace ${entry.id}"
      ; nf-fa-square (nerd font)
      {"${entry.is_active}" ? "" : ""}))))


(defwidget ram []
  (icon-module :class "ram" :icon "" :visible {EWW_RAM.used_mem_perc != ""}
    (label :text "${round(EWW_RAM.used_mem_perc, 0)}%")))

(defwidget notifications []
  (icon-module :class "notifications" :icon "" :visible {notifications_listen.show == "yes"}
    (literal :content {notifications_listen.content})))

(defwidget date []
  (icon-module :class "date" :icon ""
    (label :text date_poll)))

(defwidget time []
  (icon-module :class "time" :icon ""
    (label :text time_poll)))

(defwidget cpu []
  (icon-module :class "cpu" :icon ""
    (label :text "${round(EWW_CPU.avg, 0)}%")))

(defwidget disk []
  (icon-module :class "disk" :icon ""
    (label :text "${round(EWW_DISK["/"].used_perc, 0)}%")))

(defwidget updates []
  (icon-module :class "updates" :icon "" :visible {updates_poll != ""}
    (label :text updates_poll)))

(defwidget ping []
  (icon-module :class "ping" :icon ""
    (label :text ping_poll)))

(defwidget network []
  (icon-module :class "network" :icon ""
    (label :text "${round(EWW_NET.wlp0s20f3.NET_UP / 1000000, 2)}/${round(EWW_NET.wlp0s20f3.NET_DOWN / 1000000, 2)}")))

(defwidget speaker []
  (icon-module :class "speaker" :icon {speaker_poll.icon}
  (eventbox :onscroll `eww update speaker_poll="$(./modules/volumecontrol.sh {})"`
      (button :onclick `eww update speaker_poll="$(./modules/volumecontrol.sh mute)"`
    (label :text speaker_poll)))))

(defwidget brightness []
  (icon-module :class "brightness" :icon "󰃞 "
    (eventbox :onscroll `eww update brightness_poll="$(./modules/brightness.sh {})"`
        (label :text {brightness_poll}))))

; foldend

; vim:foldmarker=foldstart,foldend
